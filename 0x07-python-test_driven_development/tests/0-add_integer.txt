	---------- Importing the ``add_integer`` function ----------
	>>> add_integer = __import__('0-add_integer').add_integer

    ==================== Principal requirements checkers ====================


	---------- Check that the file is executable ----------
	>>> import os
	>>> os.access('0-add_integer.py', os.X_OK)
	True

	---------- Check for the documentation of the module ----------
	>>> len(__import__("0-add_integer").__doc__) > 10
	True

	---------- Check for the documentation of the function ----------
	>>> len(__import__("0-add_integer").add_integer.__doc__) > 10
	True

	---------- Check for pep8 style ----------
	>>> os.popen("pep8 0-add_integer.py").read()
	''

	---------- Check for a newline at the end of the file ----------
	>>> os.popen("cat -e 0-add_integer.py | tail -1").read()[-1]
	'\n'

	---------- Check for the file has a shebang ----------
	>>> os.popen("cat 0-add_integer.py | head -1").read()
	'#!/usr/bin/python3\n'

	---------- Check that the README file exists ----------
	>>> cwd = os.getcwd()
	>>> check_readme = cwd + '/README.md'
	>>> os.path.exists(check_readme)
	True

    ==================== Testing with int and float ====================

    >>> add_integer(1, 3)
    4

    >>> add_integer(1.358, 4.36958282)
    5

    >>> add_integer(5, 5.368519)
    10

    >>> add_integer(0.55946561, 13)
    13

    >>> add_integer(-98, 98)
    0

    >>> add_integer(-96, -4)
    -100

    >>> add_integer(float('inf'), 1)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    ==================== Testing with no arguments ====================

    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(2)
    100

    >>> add_integer(None, 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ==================== Testing with other type of argument ====================

	>>> add_integer(10, "world")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

    >>> add_integer("Hello", 10)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

	>>> add_integer("Hello", "World")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer


	>>> add_integer(5, [6, 7, 8])
	Traceback (most recent call last):
	...
	TypeError: b must be an integer


	>>> add_integer(("hola", 5), 8)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
